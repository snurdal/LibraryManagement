@model List<Core.Concretes.DTOs.Book.BookListDTO>
@{
    ViewData["Title"] = "Library Collection";
    var searchDto = ViewBag.SearchDto as Core.Concretes.DTOs.Search.BookSearchDTO;
    var authors = ViewBag.Authors as List<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>;
    var categories = ViewBag.Categories as List<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>;
}

<div class="page-header">
    <h1 class="page-title">
        <i class="fas fa-book-reader me-3"></i>Discover Amazing Books
    </h1>
    <p class="page-subtitle">Explore our carefully curated collection of @Model.Count books</p>
</div>

<!-- Search and Filter Section -->
<div class="search-container">
    <form asp-controller="Home" asp-action="Search" method="post" id="searchForm">
        <div class="row g-3">
            <div class="col-md-4">
                <label for="searchTerm" class="form-label">
                    <i class="fas fa-search me-1"></i>Search Books
                </label>
                <input type="text" class="form-control" id="searchTerm" name="SearchTerm"
                       value="@searchDto?.SearchTerm" placeholder="Book title, description...">
            </div>
            <div class="col-md-3">
                <label for="categoryId" class="form-label">
                    <i class="fas fa-tag me-1"></i>Category
                </label>
                <select class="form-select form-control" id="categoryId" name="CategoryId">
                    <option value="">All Categories</option>
                    @if (categories != null)
                    {
                        @foreach (var category in categories)
                        {
                            <option value="@category.Value" selected="@(searchDto?.CategoryId?.ToString() == category.Value)">
                                @category.Text
                            </option>
                        }
                    }
                </select>
            </div>
            <div class="col-md-3">
                <label for="authorId" class="form-label">
                    <i class="fas fa-user me-1"></i>Author
                </label>
                <select class="form-select form-control" id="authorId" name="AuthorId">
                    <option value="">All Authors</option>
                    @if (authors != null)
                    {
                        @foreach (var author in authors)
                        {
                            <option value="@author.Value" selected="@(searchDto?.AuthorId?.ToString() == author.Value)">
                                @author.Text
                            </option>
                        }
                    }
                </select>
            </div>
            <div class="col-md-2">
                <label for="publishYear" class="form-label">
                    <i class="fas fa-calendar me-1"></i>Year
                </label>
                <input type="number" class="form-control" id="publishYear" name="PublishYear"
                       value="@searchDto?.PublishYear" placeholder="Year" min="1800" max="@DateTime.Now.Year">
            </div>
        </div>
        <div class="row mt-3">
            <div class="col-md-12 d-flex gap-2">
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-search me-1"></i>Search Books
                </button>
                <button type="button" class="btn btn-outline-primary" onclick="clearSearch()">
                    <i class="fas fa-times me-1"></i>Clear Filters
                </button>
                <div class="ms-auto">
                    <a href="/Books/Create" class="btn btn-success">
                        <i class="fas fa-plus me-1"></i>Add New Book
                    </a>
                </div>
            </div>
        </div>
    </form>
</div>

<!-- Results Summary -->
@if (searchDto != null && (!string.IsNullOrEmpty(searchDto.SearchTerm) || searchDto.CategoryId.HasValue || searchDto.AuthorId.HasValue || searchDto.PublishYear.HasValue))
{
    <div class="alert alert-info">
        <i class="fas fa-info-circle me-2"></i>
        Found <strong>@Model.Count</strong> books matching your search criteria.
    </div>
}

<!-- Books Grid -->
@if (Model.Any())
{
    <div class="book-grid">
        @foreach (var book in Model)
        {
            <div class="book-card">
                <div class="position-relative">
                    @if (!string.IsNullOrEmpty(book.CoverImagePath))
                    {
                        <img src="~/@book.CoverImagePath" alt="@book.Title" class="book-image"
                             onerror="this.src='/images/no-book-cover.jpg'">
                    }
                    else
                    {
                        <div class="book-image d-flex align-items-center justify-content-center bg-light">
                            <div class="text-center text-muted">
                                <i class="fas fa-book fa-3x mb-2"></i>
                                <p class="mb-0">No Cover Image</p>
                            </div>
                        </div>
                    }
                    <div class="position-absolute top-0 end-0 p-2">
                        <span class="category-badge">@book.CategoryName</span>
                    </div>
                </div>

                <div class="book-content">
                    <h3 class="book-title">@book.Title</h3>

                    <div class="book-meta mb-2">
                        <div class="d-flex justify-content-between align-items-center mb-1">
                            <span class="author-link">
                                <i class="fas fa-user-edit me-1"></i>@book.AuthorFullName
                            </span>
                            <small class="text-muted">
                                <i class="fas fa-calendar me-1"></i>@book.PublishYear
                            </small>
                        </div>
                        <small class="text-muted">
                            <i class="fas fa-clock me-1"></i>Added @book.CreateDate.ToString("MMM dd, yyyy")
                        </small>
                    </div>

                    @if (!string.IsNullOrEmpty(book.ShortDescription))
                    {
                        <p class="book-description">@book.ShortDescription</p>
                    }

                    <div class="mt-auto pt-3">
                        <div class="d-flex gap-2">
                            <a href="/Books/Details/@book.Id" class="btn btn-primary btn-sm flex-grow-1">
                                <i class="fas fa-eye me-1"></i>View Details
                            </a>
                            <a href="/Books/Edit/@book.Id" class="btn btn-outline-primary btn-sm">
                                <i class="fas fa-edit"></i>
                            </a>
                            <button class="btn btn-outline-danger btn-sm" title="Delete"
                                    onclick="deleteCategory(@book.Id, '@book.Title')">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="text-center py-5">
        <div class="mb-4">
            <i class="fas fa-book-open fa-5x text-muted mb-3"></i>
            <h3 class="text-muted">No Books Found</h3>
            <p class="text-muted">
                @if (searchDto != null && (!string.IsNullOrEmpty(searchDto.SearchTerm) || searchDto.CategoryId.HasValue || searchDto.AuthorId.HasValue || searchDto.PublishYear.HasValue))
                {
                    <span>Try adjusting your search criteria or</span>
                }
                else
                {
                    <span>Get started by adding your first book to the library.</span>
                }
            </p>
        </div>
        <a href="/Books/Create" class="btn btn-primary btn-lg">
            <i class="fas fa-plus me-2"></i>Add Your First Book
        </a>
    </div>
}

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title text-danger">
                    <i class="fas fa-exclamation-triangle me-2"></i>Confirm Delete
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="text-center mb-3">
                    <i class="fas fa-trash-alt fa-3x text-danger mb-3"></i>
                    <p class="mb-2">Are you sure you want to delete this category?</p>
                    <h6 class="text-dark" id="categoryName"></h6>
                </div>
                <div class="alert alert-warning border-0" id="warningAlert">
                    <div class="d-flex align-items-start">
                        <i class="fas fa-exclamation-triangle me-3 text-warning mt-1"></i>
                        <div>
                            <strong>Warning:</strong> This action cannot be undone. <span id="bookCountWarning"></span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer border-0">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>Cancel
                </button>
                <form id="deleteForm" method="post" style="display: inline;">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-trash me-2"></i>Delete Category
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        function clearSearch() {
            document.getElementById('searchTerm').value = '';
            document.getElementById('categoryId').selectedIndex = 0;
            document.getElementById('authorId').selectedIndex = 0;
            document.getElementById('publishYear').value = '';
            document.getElementById('searchForm').submit();
        }

        // Auto-submit search when filters change
        document.getElementById('categoryId').addEventListener('change', function() {
            document.getElementById('searchForm').submit();
        });

        document.getElementById('authorId').addEventListener('change', function() {
            document.getElementById('searchForm').submit();
        });

        // Add loading animation on form submit
        document.getElementById('searchForm').addEventListener('submit', function() {
            const submitBtn = document.querySelector('button[type="submit"]');
            const originalHtml = submitBtn.innerHTML;
            submitBtn.innerHTML = '<div class="loading me-2"></div>Searching...';
            submitBtn.disabled = true;

            // Re-enable after a delay (fallback)
            setTimeout(function() {
                submitBtn.innerHTML = originalHtml;
                submitBtn.disabled = false;
            }, 5000);
        });

        // Book card hover effects
        document.querySelectorAll('.book-card').forEach(card => {
            card.addEventListener('mouseenter', function() {
                this.style.transform = 'translateY(-8px) scale(1.02)';
            });

            card.addEventListener('mouseleave', function() {
                this.style.transform = 'translateY(0) scale(1)';
            });
        });
                function deleteBook(bookId, bookTitle) {
            document.getElementById('deleteModalBookTitle').textContent = bookTitle;
            document.getElementById('deleteForm').action = '/Books/Delete/' + bookId;

            var deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
            deleteModal.show();
        }
    </script>
}

<style>
    .book-card {
        display: flex;
        flex-direction: column;
    }

    .book-content {
        display: flex;
        flex-direction: column;
        flex-grow: 1;
    }

    .form-select {
        border: 2px solid var(--border-light);
        border-radius: 8px;
        padding: 0.75rem 1rem;
        transition: all 0.3s ease;
    }

        .form-select:focus {
            border-color: var(--secondary-color);
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
        }
</style>